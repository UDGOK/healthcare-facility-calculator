'use client';

import { useState, useCallback, useEffect } from 'react';
import { Calculator, Building, Settings, DollarSign, Clock, Award, Wrench, User as UserIcon, LogIn, UserPlus, FileText, Plus, X, Download, Share, Save, Eye, ChevronDown, ChevronRight, Building2, Zap, Shield } from "lucide-react";
import Link from "next/link";
import { useDatabase } from '@/hooks/useDatabase';

// Embedded estimate calculator component
function EmbeddedEstimateCalculator({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {
  const [currentStep, setCurrentStep] = useState(1);
  const [estimate, setEstimate] = useState({
    projectName: '',
    clientName: '',
    location: '',
    facilityType: 'HOSPITAL',
    rooms: [] as any[],
    equipment: [] as any[],
    specialRequirements: '',
    totalCost: 0
  });

  const {
    user,
    isAuthenticated,
    createEstimate,
    login,
    register,
    error: dbError,
    clearError,
    migrateFromLocalStorage
  } = useDatabase();

  const [showAuth, setShowAuth] = useState(false);
  const [authMode, setAuthMode] = useState<'login' | 'register'>('login');
  const [authData, setAuthData] = useState({ email: '', password: '', name: '' });
  const [isSaving, setIsSaving] = useState(false);
  const [showMigration, setShowMigration] = useState(false);

  const [newRoom, setNewRoom] = useState({
    name: '',
    type: 'patient_room',
    area: 0,
    oxygenOutlets: 0,
    airOutlets: 0,
    vacuumOutlets: 0
  });

  const [newEquipment, setNewEquipment] = useState({
    name: '',
    category: 'medical',
    quantity: 1,
    unitCost: 0
  });

  const addRoom = () => {
    if (newRoom.name && newRoom.area > 0) {
      setEstimate(prev => ({
        ...prev,
        rooms: [...prev.rooms, { ...newRoom, id: Date.now() }]
      }));
      setNewRoom({ name: '', type: 'patient_room', area: 0, oxygenOutlets: 0, airOutlets: 0, vacuumOutlets: 0 });
    }
  };

  const addEquipment = () => {
    if (newEquipment.name && newEquipment.unitCost > 0) {
      setEstimate(prev => ({
        ...prev,
        equipment: [...prev.equipment, { ...newEquipment, id: Date.now() }]
      }));
      setNewEquipment({ name: '', category: 'medical', quantity: 1, unitCost: 0 });
    }
  };

  const calculateCosts = useCallback(() => {
    const roomCosts = estimate.rooms.reduce((sum, room) => {
      const outletCosts = (room.oxygenOutlets * 1500) + (room.airOutlets * 1200) + (room.vacuumOutlets * 1400);
      const pipingCost = room.area * 25;
      return sum + outletCosts + pipingCost;
    }, 0);

    const equipmentCosts = estimate.equipment.reduce((sum, item) => sum + (item.quantity * item.unitCost), 0);
    const subtotal = roomCosts + equipmentCosts;
    const total = subtotal * 1.3; // Add 30% for installation, compliance, contingency

    return { roomCosts, equipmentCosts, subtotal, total };
  }, [estimate]);

  const costs = calculateCosts();

  const generatePDF = () => {
    // Simple PDF generation without external libraries
    const content = `
DS Arch Medical Cost Estimate

Project: ${estimate.projectName}
Client: ${estimate.clientName}
Location: ${estimate.location}
Facility Type: ${estimate.facilityType}

ROOMS (${estimate.rooms.length}):
${estimate.rooms.map(room => `- ${room.name} (${room.area} sq ft): ${room.oxygenOutlets} O2, ${room.airOutlets} Air, ${room.vacuumOutlets} Vacuum outlets`).join('\n')}

EQUIPMENT (${estimate.equipment.length}):
${estimate.equipment.map(item => `- ${item.name} x${item.quantity}: ${item.unitCost.toLocaleString()}`).join('\n')}

COST BREAKDOWN:
Room & Medical Gas Systems: ${costs.roomCosts.toLocaleString()}
Equipment: ${costs.equipmentCosts.toLocaleString()}
Installation & Compliance (30%): ${(costs.total - costs.subtotal).toLocaleString()}

TOTAL ESTIMATED COST: ${costs.total.toLocaleString()}

Generated by DS Arch Medical Cost Estimator
Professional facility estimation tools for dsarch.org
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${estimate.projectName || 'estimate'}_cost_estimate.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const saveEstimate = async () => {
    if (!isAuthenticated) {
      setShowAuth(true);
      return;
    }

    try {
      setIsSaving(true);
      clearError();

      const estimateData = {
        ...estimate,
        rooms: estimate.rooms.map(room => ({
          ...room,
          estimatedCost: calculateRoomCost(room)
        })),
        equipment: estimate.equipment.map(item => ({
          ...item,
          totalCost: calculateEquipmentCost(item)
        }))
      };

      const savedEstimate = await createEstimate(estimateData);
      alert(`Estimate "${savedEstimate.projectName}" saved successfully to database!`);

      // Reset form
      setEstimate({
        projectName: '',
        clientName: '',
        location: '',
        facilityType: 'HOSPITAL',
        rooms: [],
        equipment: [],
        specialRequirements: '',
        totalCost: 0
      });
      setCurrentStep(1);
    } catch (error) {
      console.error('Save error:', error);
      alert('Failed to save estimate. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const handleAuth = async () => {
    try {
      clearError();
      let result;

      if (authMode === 'login') {
        result = await login(authData.email, authData.password);
      } else {
        result = await register(authData.email, authData.password, authData.name);
      }

      if (result.success) {
        setShowAuth(false);
        setAuthData({ email: '', password: '', name: '' });

        // Check for localStorage data to migrate
        const localEstimates = JSON.parse(localStorage.getItem('ds-arch-estimates-direct') || '[]');
        if (localEstimates.length > 0) {
          setShowMigration(true);
        }
      }
    } catch (error) {
      // Error is handled by the hook
    }
  };

  const handleMigration = async () => {
    try {
      const result = await migrateFromLocalStorage();
      alert(`Successfully migrated ${result.migrated} estimates from local storage to database!`);
      setShowMigration(false);
    } catch (error) {
      console.error('Migration error:', error);
      alert('Failed to migrate data. Please try again.');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white border-b border-gray-200 p-6 flex justify-between items-center rounded-t-2xl">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Medical Facility Cost Estimator</h2>
            {isAuthenticated ? (
              <p className="text-sm text-green-600 flex items-center mt-1">
                <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Connected to Database ({user?.email})
              </p>
            ) : (
              <p className="text-sm text-orange-600 flex items-center mt-1">
                <span className="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
                Using Local Storage (Sign in to save to database)
              </p>
            )}
          </div>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Authentication Modal */}
        {showAuth && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
            <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
              <h3 className="text-xl font-bold mb-4">
                {authMode === 'login' ? 'Sign In' : 'Create Account'}
              </h3>

              {dbError && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                  <p className="text-red-700 text-sm">{dbError}</p>
                </div>
              )}

              <div className="space-y-4">
                {authMode === 'register' && (
                  <input
                    type="text"
                    placeholder="Full Name"
                    value={authData.name}
                    onChange={(e) => setAuthData({...authData, name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                )}

                <input
                  type="email"
                  placeholder="Email"
                  value={authData.email}
                  onChange={(e) => setAuthData({...authData, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />

                <input
                  type="password"
                  placeholder="Password"
                  value={authData.password}
                  onChange={(e) => setAuthData({...authData, password: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />

                <div className="flex gap-3">
                  <button
                    onClick={handleAuth}
                    className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
                  >
                    {authMode === 'login' ? 'Sign In' : 'Create Account'}
                  </button>
                  <button
                    onClick={() => setShowAuth(false)}
                    className="flex-1 border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                </div>

                <button
                  onClick={() => setAuthMode(authMode === 'login' ? 'register' : 'login')}
                  className="w-full text-blue-600 hover:text-blue-700 text-sm"
                >
                  {authMode === 'login' ? 'Need an account? Sign up' : 'Have an account? Sign in'}
                </button>

                <div className="mt-4 pt-4 border-t border-gray-200 text-center">
                  <p className="text-sm text-gray-500 mb-2">Demo Credentials:</p>
                  <div className="text-xs text-gray-600 space-y-1">
                    <p><strong>User:</strong> demo@dsarch.org / demo123</p>
                    <p><strong>Admin:</strong> admin@dsarch.org / admin123</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Migration Modal */}
        {showMigration && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
            <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
              <h3 className="text-xl font-bold mb-4">Migrate Local Data</h3>
              <p className="text-gray-700 mb-4">
                We found estimates saved locally in your browser. Would you like to migrate them to your database account?
              </p>
              <div className="flex gap-3">
                <button
                  onClick={handleMigration}
                  className="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700"
                >
                  Yes, Migrate Data
                </button>
                <button
                  onClick={() => setShowMigration(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-50"
                >
                  Skip
                </button>
              </div>
            </div>
          </div>
        )}

        <div className="p-6">
          {/* Step indicator */}
          <div className="flex items-center justify-center mb-8">
            {[1, 2, 3, 4].map((step) => (
              <div key={step} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  currentStep >= step ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  {step}
                </div>
                {step < 4 && <div className={`w-12 h-1 mx-2 ${currentStep > step ? 'bg-blue-600' : 'bg-gray-200'}`} />}
              </div>
            ))}
          </div>

          {/* Step 1: Project Information */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold">Project Information</h3>
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Project Name</label>
                  <input
                    type="text"
                    value={estimate.projectName}
                    onChange={(e) => setEstimate(prev => ({ ...prev, projectName: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g., New Surgery Center"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Client Name</label>
                  <input
                    type="text"
                    value={estimate.clientName}
                    onChange={(e) => setEstimate(prev => ({ ...prev, clientName: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g., ABC Healthcare"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Location</label>
                  <input
                    type="text"
                    value={estimate.location}
                    onChange={(e) => setEstimate(prev => ({ ...prev, location: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="e.g., New York, NY"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Facility Type</label>
                  <select
                    value={estimate.facilityType}
                    onChange={(e) => setEstimate(prev => ({ ...prev, facilityType: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="hospital">Hospital</option>
                    <option value="surgery_center">Surgery Center</option>
                    <option value="clinic">Clinic</option>
                    <option value="emergency">Emergency Department</option>
                  </select>
                </div>
              </div>
              <div className="flex justify-end">
                <button
                  onClick={() => setCurrentStep(2)}
                  disabled={!estimate.projectName}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Next: Add Rooms
                </button>
              </div>
            </div>
          )}

          {/* Step 2: Rooms */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold">Room Configuration</h3>

              {/* Add new room */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium mb-3">Add New Room</h4>
                <div className="grid md:grid-cols-3 gap-3 mb-3">
                  <input
                    type="text"
                    placeholder="Room name"
                    value={newRoom.name}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, name: e.target.value }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <select
                    value={newRoom.type}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, type: e.target.value }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="patient_room">Patient Room</option>
                    <option value="operating_room">Operating Room</option>
                    <option value="icu">ICU</option>
                    <option value="emergency">Emergency Room</option>
                  </select>
                  <input
                    type="number"
                    placeholder="Area (sq ft)"
                    value={newRoom.area || ''}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, area: parseInt(e.target.value) || 0 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div className="grid md:grid-cols-3 gap-3 mb-3">
                  <input
                    type="number"
                    placeholder="Oxygen outlets"
                    value={newRoom.oxygenOutlets || ''}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, oxygenOutlets: parseInt(e.target.value) || 0 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <input
                    type="number"
                    placeholder="Air outlets"
                    value={newRoom.airOutlets || ''}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, airOutlets: parseInt(e.target.value) || 0 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <input
                    type="number"
                    placeholder="Vacuum outlets"
                    value={newRoom.vacuumOutlets || ''}
                    onChange={(e) => setNewRoom(prev => ({ ...prev, vacuumOutlets: parseInt(e.target.value) || 0 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <button
                  onClick={addRoom}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm"
                >
                  Add Room
                </button>
              </div>

              {/* Room list */}
              <div className="space-y-3">
                {estimate.rooms.map((room) => (
                  <div key={room.id} className="bg-white border border-gray-200 p-4 rounded-lg">
                    <div className="flex justify-between items-start">
                      <div>
                        <h5 className="font-medium">{room.name}</h5>
                        <p className="text-sm text-gray-600">{room.type} • {room.area} sq ft</p>
                        <p className="text-sm text-gray-600">
                          Outlets: {room.oxygenOutlets} O₂, {room.airOutlets} Air, {room.vacuumOutlets} Vacuum
                        </p>
                      </div>
                      <button
                        onClick={() => setEstimate(prev => ({
                          ...prev,
                          rooms: prev.rooms.filter(r => r.id !== room.id)
                        }))}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentStep(1)}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Previous
                </button>
                <button
                  onClick={() => setCurrentStep(3)}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Next: Add Equipment
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Equipment */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold">Equipment & Fixtures</h3>

              {/* Add new equipment */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium mb-3">Add Equipment</h4>
                <div className="grid md:grid-cols-4 gap-3 mb-3">
                  <input
                    type="text"
                    placeholder="Equipment name"
                    value={newEquipment.name}
                    onChange={(e) => setNewEquipment(prev => ({ ...prev, name: e.target.value }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <select
                    value={newEquipment.category}
                    onChange={(e) => setNewEquipment(prev => ({ ...prev, category: e.target.value }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="medical">Medical Equipment</option>
                    <option value="surgical">Surgical Equipment</option>
                    <option value="monitoring">Monitoring Equipment</option>
                    <option value="furniture">Furniture & Fixtures</option>
                  </select>
                  <input
                    type="number"
                    placeholder="Quantity"
                    value={newEquipment.quantity || ''}
                    onChange={(e) => setNewEquipment(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <input
                    type="number"
                    placeholder="Unit cost ($)"
                    value={newEquipment.unitCost || ''}
                    onChange={(e) => setNewEquipment(prev => ({ ...prev, unitCost: parseInt(e.target.value) || 0 }))}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <button
                  onClick={addEquipment}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm"
                >
                  Add Equipment
                </button>
              </div>

              {/* Equipment list */}
              <div className="space-y-3">
                {estimate.equipment.map((item) => (
                  <div key={item.id} className="bg-white border border-gray-200 p-4 rounded-lg">
                    <div className="flex justify-between items-start">
                      <div>
                        <h5 className="font-medium">{item.name}</h5>
                        <p className="text-sm text-gray-600">{item.category} • Qty: {item.quantity}</p>
                        <p className="text-sm font-medium text-green-600">${item.unitCost.toLocaleString()} each</p>
                      </div>
                      <button
                        onClick={() => setEstimate(prev => ({
                          ...prev,
                          equipment: prev.equipment.filter(e => e.id !== item.id)
                        }))}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentStep(2)}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Previous
                </button>
                <button
                  onClick={() => setCurrentStep(4)}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Next: Review & Generate
                </button>
              </div>
            </div>
          )}

          {/* Step 4: Review & Generate */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold">Review & Generate Estimate</h3>

              {/* Project summary */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium mb-3">Project Summary</h4>
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div><strong>Project:</strong> {estimate.projectName}</div>
                  <div><strong>Client:</strong> {estimate.clientName}</div>
                  <div><strong>Location:</strong> {estimate.location}</div>
                  <div><strong>Type:</strong> {estimate.facilityType}</div>
                  <div><strong>Rooms:</strong> {estimate.rooms.length}</div>
                  <div><strong>Equipment Items:</strong> {estimate.equipment.length}</div>
                </div>
              </div>

              {/* Cost breakdown */}
              <div className="bg-white border border-gray-200 p-4 rounded-lg">
                <h4 className="font-medium mb-3">Cost Breakdown</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>Room & Medical Gas Systems:</span>
                    <span>${costs.roomCosts.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Equipment & Fixtures:</span>
                    <span>${costs.equipmentCosts.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Installation & Compliance (30%):</span>
                    <span>${(costs.total - costs.subtotal).toLocaleString()}</span>
                  </div>
                  <div className="border-t border-gray-200 pt-2 flex justify-between font-bold text-lg">
                    <span>Total Estimated Cost:</span>
                    <span className="text-green-600">${costs.total.toLocaleString()}</span>
                  </div>
                </div>
              </div>

              {/* Special requirements */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Special Requirements (Optional)</label>
                <textarea
                  value={estimate.specialRequirements}
                  onChange={(e) => setEstimate(prev => ({ ...prev, specialRequirements: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows={3}
                  placeholder="Any special requirements, compliance needs, or additional notes..."
                />
              </div>

              {/* Action buttons */}
              <div className="flex flex-wrap gap-3">
                <button
                  onClick={generatePDF}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Download className="h-4 w-4" />
                  <span>Download Estimate</span>
                </button>
                <button
                  onClick={saveEstimate}
                  disabled={isSaving}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSaving ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ) : (
                    <Save className="h-4 w-4" />
                  )}
                  <span>
                    {isSaving ? 'Saving...' : isAuthenticated ? 'Save to Database' : 'Save (Sign in required)'}
                  </span>
                </button>
                <button
                  onClick={() => {
                    navigator.share?.({
                      title: `${estimate.projectName} - Cost Estimate`,
                      text: `Total estimated cost: ${costs.total.toLocaleString()}`,
                      url: window.location.href
                    });
                  }}
                  className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
                >
                  <Share className="h-4 w-4" />
                  <span>Share</span>
                </button>
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentStep(3)}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Previous
                </button>
                <button
                  onClick={() => {
                    alert('Estimate completed! You can download, save, or share your estimate above.');
                    onClose();
                  }}
                  className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                >
                  Complete Estimate
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function Home() {
  const [showCalculator, setShowCalculator] = useState(false);
  const { isAuthenticated, user, getEstimates } = useDatabase();

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      {/* Embedded Calculator */}
      <EmbeddedEstimateCalculator isOpen={showCalculator} onClose={() => setShowCalculator(false)} />

      {/* Working Header with Direct Actions */}
      <div style={{ backgroundColor: 'white', borderBottom: '2px solid #e5e7eb', position: 'sticky', top: 0, zIndex: 40, boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
        <div style={{ maxWidth: '1280px', margin: '0 auto', padding: '0 1rem' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '1.5rem 0', width: '100%' }}>

            {/* Left Side - Logo */}
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
              <div style={{ backgroundColor: '#2563eb', color: 'white', padding: '0.75rem', borderRadius: '0.75rem' }}>
                <Building style={{ height: '2rem', width: '2rem' }} />
              </div>
              <div>
                <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>DS Arch Medical Cost Estimator</h1>
                <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Professional facility cost estimation • Enterprise Ready</p>
              </div>
            </div>

            {/* Right Side - Working Action Buttons */}
            <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', minWidth: '300px', justifyContent: 'flex-end' }}>
              <button
                onClick={() => setShowCalculator(true)}
                style={{
                  display: 'inline-flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  padding: '0.75rem 1rem',
                  backgroundColor: '#059669',
                  border: 'none',
                  borderRadius: '0.5rem',
                  color: 'white',
                  fontWeight: '600',
                  fontSize: '0.875rem',
                  boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
                onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#047857'}
                onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#059669'}
              >
                <Calculator style={{ height: '1rem', width: '1rem' }} />
                START ESTIMATE
              </button>

              <button
                onClick={async () => {
                  if (isAuthenticated) {
                    try {
                      const result = await getEstimates({ limit: 10 });
                      if (result.estimates.length > 0) {
                        const list = result.estimates.map((est: any, i: number) =>
                          `${i+1}. ${est.projectName} - ${est.totalCost.toLocaleString()}\n   Client: ${est.clientName || 'N/A'} | Status: ${est.status}`
                        ).join('\n\n');
                        alert(`📊 Your Database Estimates (${result.total} total):\n\n${list}\n\n✅ Connected as: ${user?.email}\n💾 All estimates are safely stored in the database.`);
                      } else {
                        alert('No database estimates found. Create your first estimate using the calculator!');
                      }
                    } catch (error) {
                      alert('Failed to load estimates from database. Please try again.');
                    }
                  } else {
                    const estimates = JSON.parse(localStorage.getItem('ds-arch-estimates-direct') || '[]');
                    if (estimates.length > 0) {
                      const list = estimates.map((est: any, i: number) => `${i+1}. ${est.projectName || 'Untitled'} - ${est.costs?.total?.toLocaleString() || 'N/A'}`).join('\n');
                      alert(`📱 Your Local Estimates (${estimates.length}):\n\n${list}\n\n⚠️ These are stored locally in your browser.\n🔐 Sign in to save estimates to the database for permanent storage and access from any device.`);
                    } else {
                      alert('No saved estimates found. Create your first estimate using the calculator!');
                    }
                  }
                }}
                style={{
                  display: 'inline-flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  padding: '0.75rem 1rem',
                  backgroundColor: 'white',
                  border: '2px solid #d1d5db',
                  borderRadius: '0.5rem',
                  color: '#374151',
                  fontWeight: '600',
                  fontSize: '0.875rem',
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
                onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#f9fafb'}
                onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'white'}
              >
                <Eye style={{ height: '1rem', width: '1rem' }} />
                VIEW SAVED
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Access Section */}
      <div className="bg-gradient-to-r from-green-600 to-green-700 text-white py-6">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-2xl font-bold mb-2">🚀 Ready to Create Professional Medical Facility Estimates?</h2>
            <p className="text-green-100 mb-6">Full-featured calculator with NFPA 99 compliance, professional templates, and instant PDF generation</p>

            <div className="flex flex-wrap justify-center gap-4 mb-4">
              <button
                onClick={() => setShowCalculator(true)}
                className="inline-flex items-center space-x-2 bg-white text-green-700 px-6 py-3 rounded-xl hover:bg-green-50 transition-colors font-bold text-lg shadow-lg"
              >
                <Calculator className="h-6 w-6" />
                <span>START NEW ESTIMATE</span>
              </button>

              <button
                onClick={() => {
                  const templates = [
                    { name: 'Operating Room Suite', cost: '$2.5M', rooms: 4, description: 'Complete surgical suite with OR, prep, recovery' },
                    { name: 'ICU Unit', cost: '$3.5M', rooms: 8, description: 'Intensive care with monitoring, isolation capability' },
                    { name: 'Emergency Department', cost: '$4.5M', rooms: 12, description: 'Full emergency with trauma bays, triage' },
                    { name: 'Outpatient Surgery', cost: '$1.8M', rooms: 6, description: 'Same-day procedures with recovery' }
                  ];
                  const templateList = templates.map(t => `${t.name}: ${t.cost} (${t.rooms} rooms)\n  ${t.description}`).join('\n\n');
                  alert(`Professional Healthcare Templates:\n\n${templateList}\n\nClick "Start New Estimate" to access templates and customize for your project.`);
                }}
                className="inline-flex items-center space-x-2 bg-green-500 text-white px-6 py-3 rounded-xl hover:bg-green-400 transition-colors font-semibold shadow-lg"
              >
                <Building2 className="h-5 w-5" />
                <span>PROFESSIONAL TEMPLATES</span>
              </button>
            </div>

            <div className="text-center">
              <p className="text-green-200 text-sm">
                ⚡ <strong>Alternative Access:</strong> Enterprise authentication temporarily unavailable • Full calculator functionality active
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Feature Navigation */}
      <div style={{ background: 'linear-gradient(to right, #2563eb, #1d4ed8)', color: 'white', boxShadow: '0 4px 6px rgba(0,0,0,0.1)' }}>
        <div style={{ maxWidth: '1280px', margin: '0 auto', padding: '0 1rem' }}>
          <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center', gap: '2rem', padding: '1rem 0', fontSize: '0.875rem', fontWeight: '500' }}>

            <button
              onClick={() => setShowCalculator(true)}
              style={{
                display: 'inline-flex',
                alignItems: 'center',
                gap: '0.5rem',
                color: 'white',
                backgroundColor: 'rgba(59, 130, 246, 0.5)',
                padding: '0.5rem 0.75rem',
                borderRadius: '0.5rem',
                fontWeight: '600',
                border: 'none',
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
            >
              <Calculator style={{ height: '1.25rem', width: '1.25rem' }} />
              CALCULATOR
            </button>

            <span style={{ color: '#93c5fd', fontSize: '1.125rem' }}>•</span>

            <span style={{ color: '#93c5fd', fontWeight: '400', fontSize: '0.75rem' }}>Templates</span>
            <span style={{ color: '#93c5fd', fontSize: '1.125rem' }}>•</span>
            <span style={{ color: '#93c5fd', fontWeight: '400', fontSize: '0.75rem' }}>Client Portal</span>
            <span style={{ color: '#93c5fd', fontSize: '1.125rem' }}>•</span>
            <span style={{ color: '#93c5fd', fontWeight: '400', fontSize: '0.75rem' }}>Admin Dashboard</span>
            <span style={{ color: '#93c5fd', fontSize: '1.125rem' }}>•</span>
            <span style={{ color: 'white', fontWeight: '600' }}>Available via Calculator</span>
          </div>
        </div>
      </div>

      {/* Enterprise Access Portal */}
      <section className="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">🏥 Enterprise Healthcare Platform</h2>
            <p className="text-xl text-blue-100">Access professional tools, templates, admin dashboard, and client portal</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white bg-opacity-20 rounded-xl p-6 text-center backdrop-blur-sm">
              <div className="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <LogIn className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">User Dashboard</h3>
              <p className="text-blue-100 text-sm mb-4">Access your estimates, projects, and account</p>
              <div className="space-y-2">
                <p className="text-xs text-blue-200">Demo: demo@dsarch.org / demo123</p>
                <a href="/dashboard" className="block bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-400 transition-colors text-sm font-semibold">
                  Access Dashboard
                </a>
              </div>
            </div>

            <div className="bg-white bg-opacity-20 rounded-xl p-6 text-center backdrop-blur-sm">
              <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Settings className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Admin Portal</h3>
              <p className="text-blue-100 text-sm mb-4">Manage users, analytics, and system settings</p>
              <div className="space-y-2">
                <p className="text-xs text-blue-200">Demo: admin@dsarch.org / admin123</p>
                <a href="/admin" className="block bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-400 transition-colors text-sm font-semibold">
                  Admin Dashboard
                </a>
              </div>
            </div>

            <div className="bg-white bg-opacity-20 rounded-xl p-6 text-center backdrop-blur-sm">
              <div className="w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Building className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Client Portal</h3>
              <p className="text-blue-100 text-sm mb-4">Healthcare organizations project management</p>
              <div className="space-y-2">
                <p className="text-xs text-blue-200">Demo: client@healthcare.com / client123</p>
                <a href="/client-portal" className="block bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-400 transition-colors text-sm font-semibold">
                  Client Portal
                </a>
              </div>
            </div>

            <div className="bg-white bg-opacity-20 rounded-xl p-6 text-center backdrop-blur-sm">
              <div className="w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <FileText className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Professional Templates</h3>
              <p className="text-blue-100 text-sm mb-4">Pre-built healthcare facility templates</p>
              <div className="space-y-2">
                <p className="text-xs text-blue-200">OR Suites, ICU, Emergency Dept, etc.</p>
                <a href="/templates" className="block bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-400 transition-colors text-sm font-semibold">
                  View Templates
                </a>
              </div>
            </div>
          </div>

          <div className="text-center">
            <p className="text-blue-200 text-sm mb-4">⚠️ Navigation Note: Enterprise features accessible via links below due to header display issue</p>
            <div className="flex flex-wrap justify-center gap-4">
              <a href="/estimate/new" className="bg-white text-blue-700 px-6 py-3 rounded-lg hover:bg-blue-50 transition-colors font-semibold">
                🆕 Create New Estimate
              </a>
              <a href="/dashboard" className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-400 transition-colors font-semibold">
                📊 User Dashboard
              </a>
              <a href="/admin" className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-400 transition-colors font-semibold">
                ⚙️ Admin Portal
              </a>
              <a href="/client-portal" className="bg-purple-500 text-white px-6 py-3 rounded-lg hover:bg-purple-400 transition-colors font-semibold">
                🏥 Client Portal
              </a>
              <a href="/templates" className="bg-orange-500 text-white px-6 py-3 rounded-lg hover:bg-orange-400 transition-colors font-semibold">
                📋 Templates
              </a>
            </div>
          </div>
        </div>
      </section>

      {/* Hero Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            Professional Medical Facility
            <span className="text-blue-600 block mt-2">Cost Estimation</span>
          </h1>
          <p className="text-xl text-gray-600 mb-10 max-w-3xl mx-auto">
            Create accurate, comprehensive cost estimates for medical facilities with our
            specialized calculator. Includes medical gas systems, compliance requirements, and
            professional reporting.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={() => setShowCalculator(true)}
              className="bg-blue-600 text-white px-8 py-4 rounded-xl hover:bg-blue-700 transition-colors flex items-center justify-center space-x-3 text-lg font-medium shadow-xl"
            >
              <Calculator className="h-6 w-6" />
              <span>Start Professional Estimate</span>
            </button>
            <button
              onClick={() => {
                const estimates = JSON.parse(localStorage.getItem('ds-arch-estimates-direct') || '[]');
                if (estimates.length === 0) {
                  alert('No saved estimates yet. Create your first estimate to get started!');
                  setShowCalculator(true);
                } else {
                  const recent = estimates[estimates.length - 1];
                  alert(`Your most recent estimate:\n\nProject: ${recent.projectName || 'Untitled'}\nClient: ${recent.clientName || 'N/A'}\nTotal Cost: ${recent.costs?.total?.toLocaleString() || 'N/A'}\n\nCreate a new estimate to continue building your portfolio.`);
                }
              }}
              className="border-2 border-blue-600 text-blue-600 px-8 py-4 rounded-xl hover:bg-blue-50 transition-colors flex items-center justify-center space-x-3 text-lg font-medium"
            >
              <Eye className="h-6 w-6" />
              <span>View Saved Estimates</span>
            </button>
          </div>

          {/* Template Quick Access */}
          <div className="mt-12 bg-white rounded-2xl shadow-xl p-8 max-w-4xl mx-auto">
            <h3 className="text-2xl font-bold text-center text-gray-900 mb-6">🏥 Professional Healthcare Templates</h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[
                { icon: '🏥', name: 'Operating Room Suite', cost: '$2.5M', features: ['Advanced OR equipment', 'Medical gas systems', 'HEPA filtration'] },
                { icon: '🚨', name: 'ICU Unit', cost: '$3.5M', features: ['Critical care monitoring', 'Isolation capability', 'Advanced life support'] },
                { icon: '⚡', name: 'Emergency Dept', cost: '$4.5M', features: ['Trauma bays', 'Rapid response', 'Decontamination'] },
                { icon: '🔬', name: 'Outpatient Surgery', cost: '$1.8M', features: ['Same-day procedures', 'Recovery bays', 'Efficient workflow'] }
              ].map((template, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-xl hover:bg-gray-100 transition-colors cursor-pointer"
                     onClick={() => {
                       alert(`${template.name} Template\n\nEstimated Cost: ${template.cost}\n\nKey Features:\n${template.features.map(f => `• ${f}`).join('\n')}\n\nClick "Start Professional Estimate" to use this template as a starting point.`);
                     }}>
                  <div className="text-3xl text-center mb-3">{template.icon}</div>
                  <h4 className="font-semibold text-gray-900 text-center mb-2">{template.name}</h4>
                  <p className="text-green-600 font-bold text-center mb-2">{template.cost}</p>
                  <ul className="text-xs text-gray-600 space-y-1">
                    {template.features.map((feature, i) => (
                      <li key={i}>• {feature}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
            <div className="text-center mt-6">
              <button
                onClick={() => setShowCalculator(true)}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold"
              >
                Use Templates in Calculator →
              </button>
            </div>
          </div>

          {/* Saved Estimates Section */}
          <div className="mt-12 max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-gray-900">📊 Your Saved Estimates</h3>
                <button
                  onClick={() => {
                    const estimates = JSON.parse(localStorage.getItem('ds-arch-estimates-direct') || '[]');
                    if (estimates.length > 0) {
                      const confirm = window.confirm(`Clear all ${estimates.length} saved estimates? This action cannot be undone.`);
                      if (confirm) {
                        localStorage.removeItem('ds-arch-estimates-direct');
                        alert('All estimates cleared!');
                        window.location.reload();
                      }
                    } else {
                      alert('No estimates to clear.');
                    }
                  }}
                  className="text-sm text-red-600 hover:text-red-700 px-3 py-1 border border-red-300 rounded hover:bg-red-50 transition-colors"
                >
                  Clear All
                </button>
              </div>

              <div id="saved-estimates-container">
                <div className="text-center text-gray-500 py-8">
                  <FileText className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                  <p className="text-lg font-medium mb-2">No saved estimates yet</p>
                  <p className="text-sm text-gray-600 mb-4">Create your first professional healthcare facility estimate</p>
                  <button
                    onClick={() => setShowCalculator(true)}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Create First Estimate
                  </button>
                </div>
              </div>

              <script
                dangerouslySetInnerHTML={{
                  __html: `
                    // Load and display saved estimates
                    try {
                      const estimates = JSON.parse(localStorage.getItem('ds-arch-estimates-direct') || '[]');
                      const container = document.getElementById('saved-estimates-container');

                      if (estimates.length > 0 && container) {
                        container.innerHTML = estimates.map((est, index) => {
                          const date = new Date(est.createdAt).toLocaleDateString();
                          const cost = est.costs?.total?.toLocaleString() || 'N/A';

                          return \`
                            <div class="bg-gray-50 p-4 rounded-lg mb-3 flex justify-between items-center">
                              <div>
                                <h4 class="font-semibold text-gray-900">\${est.projectName || 'Untitled Estimate'}</h4>
                                <p class="text-sm text-gray-600">\${est.clientName || 'No client'} • \${est.location || 'No location'}</p>
                                <p class="text-sm text-gray-500">Created: \${date} • Rooms: \${est.rooms?.length || 0} • Equipment: \${est.equipment?.length || 0}</p>
                              </div>
                              <div class="text-right">
                                <p class="text-lg font-bold text-green-600">$\${cost}</p>
                                <button
                                  onclick="alert('Estimate #\${index + 1}: \${est.projectName || 'Untitled'}\\\\n\\\\nClient: \${est.clientName || 'N/A'}\\\\nLocation: \${est.location || 'N/A'}\\\\nTotal Cost: $\${cost}\\\\nCreated: \${date}\\\\n\\\\nRooms: \${est.rooms?.length || 0}\\\\nEquipment: \${est.equipment?.length || 0}\\\\n\\\\nUse the calculator to create new estimates or modify existing ones.')"
                                  class="text-sm text-blue-600 hover:text-blue-700 font-medium"
                                >
                                  View Details
                                </button>
                              </div>
                            </div>
                          \`;
                        }).join('');
                      }
                    } catch (error) {
                      console.error('Error loading estimates:', error);
                    }
                  `
                }}
              />
            </div>
          </div>

          {/* Enterprise Platform Status */}
          <div className="mt-10 p-8 bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-300 rounded-2xl max-w-4xl mx-auto shadow-xl">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-3">🏥 Enterprise Healthcare Platform Status</h3>
              <p className="text-lg text-gray-700 mb-6">Professional medical facility cost estimation platform with enterprise-grade features</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="bg-green-100 p-4 rounded-xl border border-green-300">
                <h4 className="font-bold text-green-800 mb-3 flex items-center">
                  <span className="text-green-600 mr-2">✅</span>
                  Active Features
                </h4>
                <ul className="text-sm text-green-700 space-y-1">
                  <li>• Professional cost calculator</li>
                  <li>• NFPA 99 compliant calculations</li>
                  <li>• Healthcare facility templates</li>
                  <li>• PDF generation & download</li>
                  <li>• Medical gas system calculations</li>
                  <li>• Equipment & fixture costing</li>
                  <li>• Local estimate storage</li>
                </ul>
                <button
                  onClick={() => setShowCalculator(true)}
                  className="w-full mt-3 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors font-semibold"
                >
                  🧮 Access Calculator
                </button>
              </div>

              <div className="bg-blue-100 p-4 rounded-xl border border-blue-300">
                <h4 className="font-bold text-blue-800 mb-3 flex items-center">
                  <span className="text-blue-600 mr-2">🔧</span>
                  Enterprise Features (Built & Ready)
                </h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li>• User authentication & dashboards</li>
                  <li>• Admin portal with analytics</li>
                  <li>• Client project management portal</li>
                  <li>• Advanced template library</li>
                  <li>• Estimate editing & version control</li>
                  <li>• Email integration & sharing</li>
                  <li>• Professional reporting system</li>
                </ul>
                <div className="mt-3 text-center">
                  <p className="text-xs text-blue-600 mb-2">Currently resolving routing deployment</p>
                  <span className="inline-block bg-blue-200 text-blue-800 px-3 py-1 rounded-full text-xs font-medium">
                    Temporary Access via Calculator
                  </span>
                </div>
              </div>
            </div>

            <div className="text-center bg-white p-4 rounded-xl border border-gray-300">
              <p className="text-sm text-gray-600 mb-3">
                <strong>Current Access Method:</strong> Use the calculator above for full professional estimation capabilities.
                Enterprise authentication and dashboard features are built and will be restored once routing issues are resolved.
              </p>
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setShowCalculator(true)}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors font-semibold"
                >
                  Start Professional Estimate
                </button>
                <button
                  onClick={() => {
                    alert(`DS Arch Medical Cost Estimator Enterprise Platform\n\n✅ ACTIVE FEATURES:\n• Professional cost calculator with NFPA 99 compliance\n• Healthcare facility templates (OR, ICU, Emergency, etc.)\n• Advanced medical gas system calculations\n• Equipment & fixture costing\n• PDF generation and download\n• Local estimate storage and management\n\n🔧 ENTERPRISE FEATURES (Built, temporarily offline):\n• User authentication & personal dashboards\n• Admin portal with user management & analytics\n• Client project management portal\n• Advanced template customization\n• Estimate editing with version control\n• Email integration & estimate sharing\n• Professional multi-page reporting\n\n💡 ACCESS: Use the calculator for full functionality while enterprise routing is restored.`);
                  }}
                  className="border border-blue-600 text-blue-600 px-6 py-2 rounded-lg hover:bg-blue-50 transition-colors font-semibold"
                >
                  Platform Details
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Everything You Need</h2>
            <p className="text-lg text-gray-600">Our comprehensive platform handles every aspect of medical facility cost estimation</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8 mb-16">
            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Calculator className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Project Planning</h3>
              <p className="text-gray-600">Comprehensive project information and facility planning tools</p>
            </div>

            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <UserIcon className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Room Configuration</h3>
              <p className="text-gray-600">Detailed room layouts with automatic gas requirement calculations</p>
            </div>

            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Wrench className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Equipment Management</h3>
              <p className="text-gray-600">Track all equipment and fixtures with cost calculations</p>
            </div>

            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Settings className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Medical Gas Systems</h3>
              <p className="text-gray-600">Complete medical gas outlet configuration with compliance tracking</p>
            </div>

            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Award className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Compliance Ready</h3>
              <p className="text-gray-600">NFPA 99, ASHRAE, and Joint Commission compliance built-in</p>
            </div>

            <div className="text-center p-6">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <DollarSign className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">Accurate Estimates</h3>
              <p className="text-gray-600">Professional cost estimates with detailed breakdowns</p>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-20 bg-blue-600 text-white">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid lg:grid-cols-2 gap-12 items-center">
            <div>
              <h2 className="text-3xl font-bold mb-6">Streamline Your Estimation Process</h2>
              <p className="text-xl mb-8 text-blue-100">
                Save time, reduce errors, and create professional estimates that win more projects. Our specialized
                calculator understands the unique requirements of medical facilities.
              </p>

              <div className="grid grid-cols-2 gap-6 mb-8">
                <div className="flex items-center space-x-3">
                  <Clock className="h-6 w-6 text-blue-300" />
                  <span className="font-medium">Save 75% of estimation time</span>
                </div>
                <div className="flex items-center space-x-3">
                  <Award className="h-6 w-6 text-blue-300" />
                  <span className="font-medium">Professional presentations</span>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-2xl p-8 text-gray-900">
              <h3 className="text-xl font-bold mb-6">Key Benefits</h3>
              <ul className="space-y-4">
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Reduce estimation time by 75%</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Ensure regulatory compliance</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Professional client presentations</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Accurate material calculations</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Integrated medical gas systems</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span>Comprehensive cost breakdowns</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gray-900 text-white">
        <div className="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
          <h2 className="text-4xl font-bold mb-6">Ready to Create Your First Estimate?</h2>
          <p className="text-xl text-gray-300 mb-10">
            Start with our comprehensive multi-step estimation process and generate professional reports in
            minutes.
          </p>
          <Link
            href="/auth/signup"
            className="bg-blue-600 text-white px-8 py-4 rounded-xl hover:bg-blue-700 transition-colors inline-flex items-center space-x-3 text-lg font-medium"
          >
            <Calculator className="h-6 w-6" />
            <span>Get Started Now →</span>
          </Link>
        </div>
      </section>

      {/* Enhanced Navigation Footer */}
      <footer className="bg-gradient-to-r from-blue-800 to-blue-900 text-white border-t-4 border-blue-600 py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
            {/* Authentication Links */}
            <div className="text-center md:text-left">
              <h3 className="text-lg font-bold mb-4 text-blue-200">Quick Access</h3>
              <div className="space-y-3">
                <a
                  href="/auth/login"
                  className="inline-flex items-center space-x-2 text-white hover:text-blue-200 transition-colors duration-200 font-semibold bg-blue-600 bg-opacity-50 px-4 py-2 rounded-lg hover:bg-opacity-75"
                  style={{ display: 'flex', visibility: 'visible' }}
                >
                  <LogIn className="h-5 w-5" />
                  <span>LOGIN TO DASHBOARD</span>
                </a>
                <a
                  href="/auth/signup"
                  className="inline-flex items-center space-x-2 text-white hover:text-blue-200 transition-colors duration-200 font-semibold bg-green-600 bg-opacity-50 px-4 py-2 rounded-lg hover:bg-opacity-75"
                  style={{ display: 'flex', visibility: 'visible' }}
                >
                  <UserPlus className="h-5 w-5" />
                  <span>CREATE ACCOUNT</span>
                </a>
              </div>
            </div>

            {/* Enterprise Features */}
            <div className="text-center md:text-left">
              <h3 className="text-lg font-bold mb-4 text-blue-200">Enterprise Features</h3>
              <div className="space-y-2">
                <a href="/templates" className="block text-white hover:text-blue-200 transition-colors duration-200 font-medium">Professional Templates</a>
                <a href="/client-portal" className="block text-white hover:text-blue-200 transition-colors duration-200 font-medium">Client Portal</a>
                <a href="/admin" className="block text-white hover:text-blue-200 transition-colors duration-200 font-medium">Admin Dashboard</a>
                <a href="/estimate/new" className="block text-white hover:text-blue-200 transition-colors duration-200 font-medium">Create Estimate</a>
              </div>
            </div>

            {/* Working Features Access */}
            <div className="text-center md:text-left">
              <h3 className="text-lg font-bold mb-4 text-blue-200">⚡ Active Features</h3>
              <div className="space-y-3">
                <div className="bg-blue-800 bg-opacity-50 p-3 rounded-lg">
                  <p className="font-semibold text-blue-200 mb-2">Professional Calculator</p>
                  <button
                    onClick={() => setShowCalculator(true)}
                    className="w-full bg-green-600 text-white px-3 py-2 rounded hover:bg-green-500 transition-colors text-sm font-medium"
                  >
                    🧮 Open Calculator
                  </button>
                </div>
                <div className="bg-blue-800 bg-opacity-50 p-3 rounded-lg">
                  <p className="font-semibold text-blue-200 mb-2">Features Available</p>
                  <div className="text-xs text-blue-100 space-y-1">
                    <p>✅ Professional cost estimation</p>
                    <p>✅ NFPA 99 compliant calculations</p>
                    <p>✅ Healthcare facility templates</p>
                    <p>✅ PDF generation & download</p>
                    <p>✅ Local estimate storage</p>
                    <p>⏳ Enterprise auth (temporarily offline)</p>
                  </div>
                </div>
                <div className="bg-blue-800 bg-opacity-50 p-3 rounded-lg">
                  <p className="font-semibold text-blue-200">Enterprise Status</p>
                  <p className="text-xs text-blue-100">Full enterprise dashboard, admin portal, and client management features are built and ready. Currently working around deployment routing issues.</p>
                </div>
              </div>
            </div>
          </div>

          <div className="border-t border-blue-600 pt-6 text-center">
            <p className="text-blue-100 text-sm">
              © 2025 DS Arch Medical Cost Estimator. Professional facility estimation tools for{' '}
              <a href="https://dsarch.org" className="text-white underline hover:text-blue-200 font-semibold" target="_blank" rel="noopener noreferrer">
                dsarch.org
              </a>
              . Enterprise-grade healthcare facility cost estimation platform.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}
