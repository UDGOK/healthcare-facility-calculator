// DS Arch Medical Cost Estimator Database Schema
// Enterprise-grade healthcare facility cost estimation platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  profile   UserProfile?

  // Relationships
  estimates        Estimate[]
  auditLogs        AuditLog[]
  sessions         UserSession[]
  notifications    Notification[]
  templateCreated  Template[]
  clientProjects   ClientProject[]

  @@map("users")
}

model UserProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  firstName    String?
  lastName     String?
  company      String?
  phone        String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String? @default("USA")
  timezone     String? @default("America/New_York")
  language     String? @default("en")
  avatar       String?
  preferences  Json?   // JSON object for user preferences

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  CLIENT
}

// ===== ESTIMATES =====

model Estimate {
  id          String        @id @default(cuid())
  userId      String
  projectName String
  clientName  String?
  location    String?
  facilityType FacilityType @default(HOSPITAL)

  // Cost information
  totalCost   Decimal       @db.Decimal(12, 2)
  costBreakdown Json        // Detailed cost breakdown

  // Project details
  specialRequirements String?
  squareFootage      Int?
  numberOfRooms      Int?

  // Status and metadata
  status      EstimateStatus @default(DRAFT)
  version     Int            @default(1)
  isTemplate  Boolean        @default(false)
  templateId  String?

  // Timestamps
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  completedAt DateTime?

  // Relationships
  user         User            @relation(fields: [userId], references: [id])
  rooms        Room[]
  equipment    Equipment[]
  versions     EstimateVersion[]
  auditLogs    AuditLog[]
  template     Template?       @relation(fields: [templateId], references: [id])

  @@map("estimates")
  @@index([userId, status])
  @@index([facilityType])
  @@index([createdAt])
}

model EstimateVersion {
  id           String   @id @default(cuid())
  estimateId   String
  version      Int
  data         Json     // Complete estimate data snapshot
  changeLog    String?  // Description of changes
  createdBy    String   // User ID who created this version
  createdAt    DateTime @default(now())

  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@unique([estimateId, version])
  @@map("estimate_versions")
}

model Room {
  id               String   @id @default(cuid())
  estimateId       String
  name             String
  type             String
  area             Decimal  @db.Decimal(8, 2)
  ceilingHeight    Decimal? @db.Decimal(4, 2)

  // Medical gas outlets
  oxygenOutlets    Int      @default(0)
  airOutlets       Int      @default(0)
  vacuumOutlets    Int      @default(0)
  co2Outlets       Int      @default(0)
  n2oOutlets       Int      @default(0)

  // Requirements
  pressureRequirement String?
  backupRequired      Boolean @default(false)
  specialRequirements String?

  // Compliance
  nfpaCompliance      String[]
  flowRateRequirements Json?   // Custom flow rate requirements

  // Costs
  estimatedCost       Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("rooms")
  @@index([estimateId])
}

model Equipment {
  id               String   @id @default(cuid())
  estimateId       String
  name             String
  category         String
  manufacturer     String?
  model            String?
  quantity         Int
  unitCost         Decimal  @db.Decimal(10, 2)
  installationCost Decimal  @db.Decimal(10, 2) @default(0)
  totalCost        Decimal  @db.Decimal(10, 2)

  // Equipment details
  warranty         String?
  powerRequirement String?
  spaceRequirement Decimal? @db.Decimal(6, 2)
  maintenanceRequired Boolean @default(false)
  specialInstallation String?

  // Metadata
  description      String?
  specifications   Json?    // Detailed specifications

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  estimate Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("equipment")
  @@index([estimateId])
  @@index([category])
}

enum FacilityType {
  HOSPITAL
  SURGERY_CENTER
  CLINIC
  EMERGENCY
  SPECIALTY
  ICU
  LABORATORY
  IMAGING
  REHABILITATION
  OUTPATIENT
  OTHER
}

enum EstimateStatus {
  DRAFT
  IN_PROGRESS
  UNDER_REVIEW
  APPROVED
  COMPLETED
  ARCHIVED
  CANCELLED
}

// ===== TEMPLATES =====

model Template {
  id               String         @id @default(cuid())
  name             String
  description      String?
  facilityType     FacilityType
  category         String
  isPublic         Boolean        @default(false)
  isOfficial       Boolean        @default(false)

  // Template data
  templateData     Json           // Complete template structure
  estimatedCost    Decimal        @db.Decimal(12, 2)
  squareFootage    Int?
  constructionTime String?        // e.g., "18-24 months"

  // Usage statistics
  usageCount       Int            @default(0)
  rating           Decimal?       @db.Decimal(3, 2)

  // Metadata
  tags             String[]
  version          String         @default("1.0")

  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relationships
  creator          User           @relation(fields: [createdBy], references: [id])
  estimates        Estimate[]

  @@map("templates")
  @@index([facilityType, isPublic])
  @@index([category])
}

// ===== CLIENT PORTAL =====

model ClientCompany {
  id             String   @id @default(cuid())
  name           String
  contactName    String
  email          String   @unique
  phone          String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  country        String?  @default("USA")

  // Company details
  accountType    String   // healthcare_provider, contractor, architect, etc.
  taxId          String?
  website        String?

  // Preferences
  preferences    Json?

  // Status
  isActive       Boolean  @default(true)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  projects       ClientProject[]
  notifications  ClientNotification[]

  @@map("client_companies")
}

model ClientProject {
  id                    String              @id @default(cuid())
  clientCompanyId       String
  assignedUserId        String?             // DS Arch team member

  // Project information
  title                 String
  description           String?
  facilityType          FacilityType
  projectType           ProjectType
  priority              Priority            @default(MEDIUM)
  status                ProjectStatus       @default(SUBMITTED)

  // Timeline
  requestedStartDate    DateTime?
  estimatedDuration     Int?                // months
  actualStartDate       DateTime?
  completedDate         DateTime?
  dueDate               DateTime?

  // Budget
  estimatedBudgetRange  String?
  fundingSource         String?
  approvalRequired      Boolean             @default(false)

  // Scope
  squareFootage         Int?
  numberOfRooms         Int?
  specialtyAreas        String[]
  medicalGasRequired    Boolean             @default(false)
  hvacUpgrade           Boolean             @default(false)
  electricalUpgrade     Boolean             @default(false)
  structuralWork        Boolean             @default(false)

  // Compliance
  regulatoryRequirements String[]
  certificationNeeded    String[]
  inspectionRequired     Boolean             @default(false)

  // Progress tracking
  overallProgress        Int                 @default(0)
  currentPhase           String?

  // Communication
  lastContactDate        DateTime?
  nextMilestone          Json?               // Milestone information

  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  // Relationships
  clientCompany          ClientCompany       @relation(fields: [clientCompanyId], references: [id])
  assignedUser           User?               @relation(fields: [assignedUserId], references: [id])
  updates                ProjectUpdate[]
  documents              ProjectDocument[]
  communications         ProjectCommunication[]

  @@map("client_projects")
  @@index([status, priority])
  @@index([facilityType])
}

model ProjectUpdate {
  id              String        @id @default(cuid())
  projectId       String
  title           String
  description     String
  updateType      UpdateType
  progress        Int?          // 0-100
  milestone       String?

  // Visibility
  visibility      Visibility    @default(CLIENT)

  createdBy       String        // User ID
  createdAt       DateTime      @default(now())

  project         ClientProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_updates")
  @@index([projectId, createdAt])
}

model ProjectDocument {
  id              String        @id @default(cuid())
  projectId       String
  name            String
  description     String?
  documentType    DocumentType
  version         String        @default("1.0")
  fileSize        Int?          // bytes
  mimeType        String?
  filePath        String?       // Storage path
  downloadUrl     String?

  // Access control
  accessLevel     AccessLevel   @default(CLIENT)

  uploadedBy      String        // User ID
  uploadedAt      DateTime      @default(now())

  project         ClientProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_documents")
  @@index([projectId, documentType])
}

model ProjectCommunication {
  id              String              @id @default(cuid())
  projectId       String
  fromUserId      String?
  fromClientId    String?
  toUserIds       String[]            // Array of user IDs
  toClientIds     String[]            // Array of client IDs

  subject         String
  message         String
  communicationType CommunicationType
  priority        Priority            @default(MEDIUM)

  // Status tracking
  status          MessageStatus       @default(SENT)
  readBy          String[]            // Array of user IDs who read

  // Attachments
  attachments     Json?               // Array of attachment objects

  createdAt       DateTime            @default(now())

  project         ClientProject       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_communications")
  @@index([projectId, createdAt])
}

enum ProjectType {
  NEW_CONSTRUCTION
  RENOVATION
  EXPANSION
  UPGRADE
  MAINTENANCE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum UpdateType {
  PROGRESS
  MILESTONE
  ISSUE
  DOCUMENT
  COMMUNICATION
  STATUS_CHANGE
}

enum Visibility {
  PUBLIC
  CLIENT
  INTERNAL
  TEAM
  ADMIN
}

enum DocumentType {
  ESTIMATE
  DRAWING
  SPECIFICATION
  PERMIT
  REPORT
  CONTRACT
  INVOICE
  PHOTO
  OTHER
}

enum AccessLevel {
  PUBLIC
  CLIENT
  TEAM
  ADMIN
}

enum CommunicationType {
  EMAIL
  NOTE
  MEETING
  CALL
  MESSAGE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  REPLIED
}

// ===== NOTIFICATIONS =====

model Notification {
  id              String           @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String

  // Associated entities
  entityType      String?          // e.g., "estimate", "project", "user"
  entityId        String?          // ID of the associated entity

  // Action information
  actionRequired  Boolean          @default(false)
  actionUrl       String?

  // Status
  isRead          Boolean          @default(false)
  priority        Priority         @default(MEDIUM)

  // Scheduling
  scheduledFor    DateTime?        // For scheduled notifications
  expiresAt       DateTime?

  createdAt       DateTime         @default(now())
  readAt          DateTime?

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId, isRead])
  @@index([type, priority])
}

model ClientNotification {
  id              String           @id @default(cuid())
  clientCompanyId String
  type            NotificationType
  title           String
  message         String

  // Associated entities
  entityType      String?
  entityId        String?

  // Action information
  actionRequired  Boolean          @default(false)
  actionUrl       String?

  // Status
  isRead          Boolean          @default(false)
  priority        Priority         @default(MEDIUM)

  createdAt       DateTime         @default(now())
  readAt          DateTime?

  clientCompany   ClientCompany    @relation(fields: [clientCompanyId], references: [id], onDelete: Cascade)

  @@map("client_notifications")
  @@index([clientCompanyId, isRead])
}

enum NotificationType {
  ESTIMATE_CREATED
  ESTIMATE_UPDATED
  ESTIMATE_COMPLETED
  PROJECT_UPDATE
  MILESTONE_REACHED
  DOCUMENT_SHARED
  MESSAGE_RECEIVED
  PAYMENT_DUE
  SYSTEM_ALERT
  USER_MENTION
  REMINDER
}

// ===== AUDIT LOGS =====

model AuditLog {
  id            String    @id @default(cuid())
  userId        String?
  action        String    // e.g., "create", "update", "delete", "login"
  entityType    String    // e.g., "estimate", "user", "template"
  entityId      String?   // ID of the affected entity
  oldValues     Json?     // Previous values (for updates)
  newValues     Json?     // New values
  metadata      Json?     // Additional context

  // Request information
  ipAddress     String?
  userAgent     String?
  requestUrl    String?

  timestamp     DateTime  @default(now())

  user          User?     @relation(fields: [userId], references: [id])
  estimate      Estimate? @relation(fields: [entityId], references: [id])

  @@map("audit_logs")
  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([action, timestamp])
}

// ===== SYSTEM CONFIGURATION =====

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isPublic    Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlBody    String
  textBody    String?
  variables   String[] // Available template variables

  // Metadata
  category    String?
  description String?
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}
